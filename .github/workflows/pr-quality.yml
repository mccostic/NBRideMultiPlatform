name: PR Quality Gate (macOS)

on:
  pull_request:
    branches:
      - main

concurrency:
  group: pr-quality-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write   # for PR comments (coverage)

env:
  GRADLE_OPTS: >
    -Dorg.gradle.jvmargs="-Xmx3g -XX:MaxMetaspaceSize=1g"
    -Dkotlin.daemon.jvm.options="-Xmx2g"
    -Dorg.gradle.daemon=false

jobs:
  # ---------- 0) Shared environment ----------
  _setup:
    name: Setup (macOS)
    runs-on: macos-latest
    timeout-minutes: 5
    outputs:
      JAVA_VERSION: ${{ steps.out.outputs.JAVA_VERSION }}
    steps:
      - name: Define outputs
        id: out
        run: echo "JAVA_VERSION=17" >> "$GITHUB_OUTPUT"

  # ---------- 1) Ktlint ----------
  ktlint:
    name: Ktlint
    runs-on: macos-latest
    needs: _setup
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ needs._setup.outputs.JAVA_VERSION }}

      - name: Set up Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Run ktlintCheck
        run: ./gradlew ktlintCheck

      - name: Upload ktlint reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ktlint-reports
          path: "**/build/reports/ktlint/**"

  # ---------- 1b) Detekt ----------
  detekt:
    name: Detekt
    runs-on: macos-latest
    needs: _setup
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ needs._setup.outputs.JAVA_VERSION }}

      - name: Set up Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Run Detekt
        run: ./gradlew detekt

      - name: Upload Detekt report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: detekt-report
          path: "**/build/reports/detekt/**"

  # ---------- 2) Unit tests ----------
  unit_test:
    name: Unit Tests
    runs-on: macos-latest
    needs:
      - ktlint
      - detekt
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Run tests (all modules)
        run: ./gradlew test

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: "**/build/reports/tests/**"

  # ---------- 3) Android Lint ----------
  android_lint:
    name: Android Lint
    runs-on: macos-latest
    needs: unit_test
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Set up Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Run Android Lint
        shell: bash
        run: |
          set -e
          if ./gradlew :composeApp:tasks --all | grep -q "^lintIntegration "; then
            ./gradlew :composeApp:lintIntegration
          else
            ./gradlew lint
          fi

      - name: Upload lint reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-lint-reports
          path: "**/build/reports/lint/**"

  # ---------- 4) Coverage + Sonar (combined) ----------
  coverage_sonar:
    name: Coverage (Kover) + Sonar
    runs-on: macos-latest
    needs: unit_test
    timeout-minutes: 30
    permissions:
      contents: read
      pull-requests: write
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Generate Kover XML + HTML + Verify threshold
        run: ./gradlew koverXmlReport koverHtmlReport koverVerify

      - name: Generate Android Lint report (for Sonar)
        run: |
          if ./gradlew :composeApp:tasks --all | grep -q "^lintIntegration "; then
            ./gradlew :composeApp:lintIntegration
          else
            ./gradlew lint
          fi

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-kover
          path: "**/build/reports/kover/**"

      - name: Sonar (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          ./gradlew sonar \
            -Dsonar.host.url="${SONAR_HOST_URL:-https://sonarcloud.io}" \
            -Dsonar.organization="mccostic" \
            -Dsonar.projectKey="mccostic_NBRideMultiPlatform" \
            -Dsonar.pullrequest.key="${{ github.event.pull_request.number }}" \
            -Dsonar.pullrequest.branch="${{ github.head_ref }}" \
            -Dsonar.pullrequest.base="${{ github.base_ref }}"

      - name: Sonar (branch)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          ./gradlew sonar \
            -Dsonar.host.url="${SONAR_HOST_URL:-https://sonarcloud.io}" \
            -Dsonar.organization="mccostic" \
            -Dsonar.projectKey="mccostic_NBRideMultiPlatform" \
            -Dsonar.branch.name="${{ github.ref_name }}"

  # ---------- 4b) Coverage % sticky PR comment ----------
  kover_pr_comment:
    name: Coverage PR Comment
    runs-on: ubuntu-latest
    needs: coverage_sonar
    if: ${{ github.event_name == 'pull_request' }}
    timeout-minutes: 5
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: coverage-kover
          path: kover

      - name: Compute coverage
        id: cov
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y libxml2-utils > /dev/null 2>&1 || true
          FILE=$(find kover -name "report.xml" | head -n 1)
          if [ -z "$FILE" ]; then
            echo "coverage=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          COVERED=$(xmllint --xpath "string(//counter[@type='INSTRUCTION']/@covered)" "$FILE" 2>/dev/null || echo "")
          MISSED=$(xmllint --xpath "string(//counter[@type='INSTRUCTION']/@missed)" "$FILE" 2>/dev/null || echo "")
          if [ -z "$COVERED" ] || [ -z "$MISSED" ]; then
            echo "coverage=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          COV=$(echo "scale=2; 100 * $COVERED / ($COVERED + $MISSED)" | bc)
          echo "coverage=$COV" >> $GITHUB_OUTPUT

      - name: Post sticky comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: kover-coverage
          message: |
            âœ… **Kover Coverage**: **${{ steps.cov.outputs.coverage }}%**

  # ---------- 5) Assemble Integration (R8/ProGuard ON) ----------
  assemble_integration:
    name: Assemble Integration (R8)
    runs-on: macos-latest
    needs:
      - android_lint
      - coverage_sonar
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Set up Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Build Integration APK (minify/shrink enabled)
        run: ./gradlew :composeApp:assembleIntegration

      - name: Upload APK(s)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-apk
          path: |
            composeApp/build/outputs/apk/integration/*.apk
            **/build/outputs/apk/integration/*.apk

      - name: Upload mapping.txt (if generated)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-mapping
          path: composeApp/build/outputs/mapping/integration/mapping.txt
          if-no-files-found: ignore

  # ---------- 6) Dependency Analysis ----------
  dependency_analysis:
    name: Dependency Analysis
    runs-on: macos-latest
    needs: _setup
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ needs._setup.outputs.JAVA_VERSION }}

      - name: Set up Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Dependency analysis
        run: ./gradlew buildHealth

      - name: Upload Dependency Analysis reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: "**/build/reports/dependency-analysis/**"

  # ---------- 7) Quality Gate summary ----------
  summary:
    name: Quality Summary
    runs-on: macos-latest
    needs:
      - ktlint
      - detekt
      - unit_test
      - android_lint
      - coverage_sonar
      - kover_pr_comment
      - assemble_integration
      - dependency_analysis
    steps:
      - name: Summary
        run: |
          {
            echo "âœ… **PR Quality Gate complete**"
            echo ""
            echo "- Ktlint âœ“"
            echo "- Detekt âœ“"
            echo "- Unit Tests âœ“"
            echo "- Android Lint âœ“"
            echo "- Kover + Sonar âœ“"
            echo "- Coverage PR Comment âœ“"
            echo "- Integration build (R8) âœ“"
            echo "- Dependency Analysis âœ“"
            echo ""
            echo "Artifacts: ktlint, detekt, unit-test, lint, coverage, APKs, mapping.txt, dependency analysis"
          } >> $GITHUB_STEP_SUMMARY